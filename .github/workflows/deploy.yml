name: Deploy to EC2

on:
  workflow_dispatch: # 수동 실행을 위한 트리거 추가

permissions:
  id-token: write
  contents: read

jobs:
  # =================================================
  # 2. Deploy Job: EC2에 배포
  # =================================================
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE }}
          aws-region: ${{ vars.AWS_REGION }}
          

      - name: Download image-uris from S3
        env:
          S3_BUCKET: ${{ vars.S3_BUCKET }}
        run: |
          aws s3 cp s3://$S3_BUCKET/tp-admin-api.txt tp-admin-api.txt
          aws s3 cp s3://$S3_BUCKET/tp-user-api.txt tp-user-api.txt

      - name: Create .env file
        run: |
          echo "SPRING_DATASOURCE_URL=${{ secrets.SPRING_DATASOURCE_URL }}" >> .env.app
          echo "SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }}" >> .env.app
          echo "SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }}" >> .env.app
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env.app
          echo "CORS_ALLOWED_ORIGINS=${{ vars.CORS_ALLOWED_ORIGINS }}" >> .env.app
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env.app
          echo "ADMIN_TOKEN=${{ secrets.ADMIN_TOKEN }}" >> .env.app
          echo "TP_ADMIN_API_IMAGE_URI=$(cat tp-admin-api.txt)" >> .env.host
          echo "TP_USER_API_IMAGE_URI=$(cat tp-user-api.txt)" >> .env.host

      - name: Prepare deploy directory
        run: |
          mkdir deploy
          cp .env.app deploy/
          cp .env.host deploy/
          cp docker-compose.yml deploy/
          cp -r nginx/ deploy/
          cp -r scripts/ deploy
          cp appspec.yml deploy/

      - name: Make zip file for CodeDeploy
        run: |
          cd deploy
          zip -r ../deploy.zip .
          cd ..

      - name: Upload zip to S3
        id: upload-s3
        env:
          S3_BUCKET: ${{ vars.S3_BUCKET }}
        run: |
          aws s3 cp deploy.zip s3://$S3_BUCKET/deploy.zip
          echo "s3_bucket=$S3_BUCKET" >> $GITHUB_OUTPUT
          echo "s3_key=deploy.zip" >> $GITHUB_OUTPUT

      - name: Deploy to EC2 via CodeDeploy
        env:
          APP_NAME: ${{ vars.CODE_DEPLOY_APP_NAME }}
          GROUP_NAME: ${{ vars.CODE_DEPLOY_GROUP_NAME }}
        run: |
          aws deploy create-deployment \
            --application-name $APP_NAME \
            --deployment-group-name $GROUP_NAME \
            --s3-location bucket=${{ steps.upload-s3.outputs.s3_bucket }},key=${{ steps.upload-s3.outputs.s3_key }},bundleType=zip